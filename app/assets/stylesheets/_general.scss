@mixin util-class($prefix, $property, $value, $breakpoint: null) {
  $postfix: "";
  @if $breakpoint {
    $postfix: "-#{$breakpoint}";
  }

  $value-title: $value;
  $value-value: $value;
  @if type-of($value) == list {
    $value-title: nth($value, 1);
    $value-value: nth($value, 2);
  }

  .#{$prefix}-#{$value-title}#{$postfix} {
    #{$property}: $value-value;
  }
}

@mixin util-classes($prefix, $property, $values) {
  @each $value in $values {
    @include util-class($prefix, $property, $value);
  }

  // loop again to give priority to breakpoint classes
  @each $value in $values {
    @each $breakpoint, $v in $breakpoints {
      @include breakpoint($breakpoint) {
        @include util-class($prefix, $property, $value, $breakpoint);
      }
    }
  }
}

* {
  box-sizing: border-box;
}

::selection {
  background: $black;
  color: $white;
}
::-moz-selection {
  background: $black;
  color: $white;
}

html, body {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
}

html {
  background-image: image-url('wavedash.png');
  background-size: 47px 10px;
  background-repeat: repeat;
  background-position: center;
  background-origin: border-box;
}

body {
  background: $white;

  background-size: auto 300px;
  background-repeat: repeat;
  background-position: center;
}

hr {
  border: none;
  height: 1px;
  background: $grey;
}

h1, h2, h3, h4, h5 {
  color: $black;
  font-family: $header;

  margin-top: 0;
  margin-bottom: 0;
  line-height: 1;
}

h3 {
  margin-bottom: 0;
}

p, ul, li, label, input, select, .table {
  color: $black;
  font-family: $sans;
}

p {
  margin: 0;
  line-height: 1.3;
}

a {
  color: $black;
  text-decoration: underline;

  font-family: $sans;

  &:hover {
    text-decoration: none;
  }
}

.wavedash {
  font-family: 'Cardo', serif;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

div {
  box-sizing: border-box;
}

.flex {
  display: flex
}
.flex-center {
  align-items: center;
  justify-content: center;
}
.flex-column {
  flex-direction: column;
}

.full-width {
  width: 100%;
}
.full-height {
  height: 100%;
}

.no-margin {
  margin: 0;
}

.d-none {
  display: none;
}

.float-left {
  float: left;
}
.float-right {
  float: right;
}
.clear-both {
  clear: both;
}

.scroll {
  overflow-y: scroll;
  height: 100%;
  padding-right: 20px;
}

.bold {
  font-weight: bold;
}
.underline {
  text-decoration: underline;
}

@include util-classes("t", "text-align", left center right justify);

.white { color: $white; }
.bg-white { background: $white; }
.black { color: $black; }
.bg-black { background: $black; }
.grey { color: $grey; }
.bg-grey { background: $grey; }

.clouds {
  background:
    linear-gradient(
      rgba(255, 255, 255, 0.2),
      rgba(255, 255, 255, 0.2)
    ),
    url('https://images.unsplash.com/photo-1496450681664-3df85efbd29f?auto=format&fit=crop&w=1920&q=80');
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
}

.clouds-2 {
  background:
    linear-gradient(
      rgba(255, 255, 255, 0.1),
      rgba(255, 255, 255, 0.1)
    ),
    url('https://images.unsplash.com/photo-1501883844334-db3e19fa9ff8?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1234&q=80');
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
}

.dunes {
  background:
    linear-gradient(
      rgba(255, 255, 255, 0.3),
      rgba(255, 255, 255, 0.3)
    ),
    url('https://images.unsplash.com/photo-1527826507412-72e447368aa1?ixlib=rb-1.2.1&auto=format&fit=crop&w=1234&q=80');
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
}

.turbolinks-progress-bar {
  transform: skewX(-45deg);
  background: $black;
}

.noselect {
  -webkit-touch-callout: none; /* iOS Safari */
    -webkit-user-select: none; /* Safari */
       -moz-user-select: none; /* Firefox */
        -ms-user-select: none; /* Internet Explorer/Edge */
            user-select: none; /* Non-prefixed version, currently
                                  supported by Chrome and Opera */
}

.overflow-visible {
  overflow: visible !important;
}


.tap {
  cursor: pointer;
}
.tap.tapped {
  border: 1px solid $black;
}
